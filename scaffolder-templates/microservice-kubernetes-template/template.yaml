apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: microservice-kubernetes-template
  title: Microservice on Civo Kubernetes
  description: |
    A template for creating a new Microservice on Civo Kubernetes.
    This template will create following components:
    - Kubernetes cluster on Civo per stage
    - Tekton pipeline to build and deploy the microservice
    - ArgoCD to deploy the microservice
  tags:
    - pulumi
    - microservice
    - kubernetes
    - tekton
    - argocd
spec:
  owner: user:dirien
  type: infrastructure
  parameters:
    - title: Provide project informations
      required:
        - component_id
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component.
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Tell us more about this component.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
              - User
    - title: Configure Infrastructure
      required:
        - stack
      properties:
        token:
          title: Civo API Token
          type: string
          description: Civo API Token
          ui:widget: password
        language:
          title: Programming Language
          type: string
          enum:
            - go
            - typescript
            - python
          enumNames:
            - Go
            - TypeScript
            - Python
          description: Programming language to use
        stack:
          title: Select stacks
          type: array
          items:
            type: string
            enum:
              - dev
              - staging
              - prod
            enumNames:
              - Development
              - Staging
              - Production
          uniqueItems: true
          description: Stack to deploy to
        args:
          title: Pulumi CLI Arguments (optional)
          type: string
          description: Optional arguments to pass to the Pulumi CLI
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}

    - id: pulumi-new-infrastucture
      name: Run Pulumi new (infrastructure)
      action: pulumi:run
      input:
        new: true
        name: "${{ parameters.component_id }}-infrastructure"
        description: ${{ parameters.description | dump }}
        organization: ediri
        stacks: ${{ parameters.stack }}
        template: "https://github.com/my-silly-organisation/microservice-civo/tree/main/infrastructure-${{ parameters.language }}"
        args:
          - ${{ parameters.args }}
          - "--dir infrastructure"

    - id: pulumi-new-service
      name: Run Pulumi new (service)
      action: pulumi:run
      input:
        new: true
        name: "${{ parameters.component_id }}-service"
        description: ${{ parameters.description | dump }}
        organization: ediri
        stacks: ${{ parameters.stack }}
        template: "https://github.com/my-silly-organisation/microservice-civo/tree/main/service-${{ parameters.language }}"
        args:
          - ${{ parameters.args }}
          - "--dir service"

    - id: wait
      name: Wait for Pulumi to finish
      action: debug:wait
      input:
        minutes: 10

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: [ "github.com" ]
        repoVisibility: public
        description: "This is ${{ parameters.component_id }}"
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main

    - id: pulumi-deploy-infrastucture
      name: Run Pulumi up (infrastructure)
      action: pulumi:run
      input:
        new: false
        deployment: false
        up: true
        name: "${{ parameters.component_id }}-infrastructure"
        repoUrl: "https://github.com/${{ (parameters.repoUrl | parseRepoUrl)['owner'] }}/${{ (parameters.repoUrl | parseRepoUrl)['repo'] }}"
        repoProjectPath: .
        organization: ediri
        config:
          "civo:region": "lon1"
          "civo:token": "${{ parameters.token}}"
        outputs:
          - kubeconfig
        stacks: ${{ parameters.stack }}


    - id: pulumi-deploy-services
      name: Run Pulumi up (services)
      action: pulumi:run
      input:
        new: false
        deployment: true
        up: true
        name: "${{ parameters.component_id }}-services"
        repoUrl: "https://github.com/${{ (parameters.repoUrl | parseRepoUrl)['owner'] }}/${{ (parameters.repoUrl | parseRepoUrl)['repo'] }}"
        repoProjectPath: .
        organization: ediri
        config:
          "infra:infra:stack-reference-name": "${{ parameters.component_id }}-infrastructure"
        stacks: ${{ parameters.stack }}

    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps['publish'].output.repoContentsUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
